#!/bin/bash

# general configuration stuff
VERSION="0.8.0"
INSTALL_PREFIX=
CONFIG_DIR="$PREFIX/etc/atom"
PKG=`which pkg`
ATOM_HOME="$HOME/.atom"
ATOM="$PKG -C $ATOM_HOME/pkg.conf"
export INSTALL_AS_USER=1

# global variables configured by command line arguments
PKG_PRE_ARGS=
PKG_CMD=
ATOM_CMD=
POST_ARGS=
DEBUG=0

# stuff for pushing files to devices
ANDROID_SERIAL=
STAGING_DIR="$ATOM_HOME/staging/android$ANDROID_API-$ARCH-$PLATFORM"
DEVICE_DESTINATION=/vendor

# stuff for creating new packages
HOST_OS=`uname -s`
HOST_OS_LOWER=`echo $HOST_OS |  tr '[:upper:]' '[:lower:]'`
NDK_URL="https://dl.google.com/android/repository/android-ndk-r16b-$HOST_OS_LOWER-x86_64.zip"
NDK_ZIP="android-ndk-r16b-$HOST_OS_LOWER-x86_64.zip"
NDK_DIR="android-ndk-r16b"
ANDROID_NDK_PATH=
MANIFEST_YAML="+MANIFEST"
DESC_FILE="+DESC"
ANDROID_API=21
ARCH=arm
MACHINE=armv7
CROSS_COMPILE=arm-linux-androideabi
PLATFORM=generic
TOOLCHAIN_HOME=$ATOM_HOME/toolchains/android-$ANDROID_API/$ARCH/

# stuff for installing files
VENDOR_ROOT=$ATOM_HOME/vendor/android-$ANDROID_API/$ARCH/

# XXX DEBUG STUFF - REMOVE
# ATOM_HOME="/tmp/$HOME/.atom"
DEVICE_DESTINATION="/data/local/tmp"
# CONFIG_DIR="/Users/apowers/Projects/atom/default-config"

# this is the starting point, called on the very last line of this file
main () {
    debug "atom version v$VERSION"
    debug " "

    atom_cmd_init

    scan_args "$@"
    print_configuration

    if [ "$ATOM_CMD" == "" ] && [ "$PKG_CMD" == "" ]; then
        echo
        echo "atom: no commands specified"
        echo
        print_usage
    fi

    # TODO: if the PKG_CMD is "help" it should show some help for 'atom' and 'pkg'
    # TODO: atom_check_init || atom_init

    if [ "$ATOM_CMD" != "" ]; then
        run_atom_cmd
        exit 0
    fi

    run_pkg_cmd
}

run_pkg_cmd() {
    debug "pkg command: $ATOM $ARGS"
    # basically calls 'pkg' with the right configuration file
    # and all the rest of the args that were specified on the command line
    $ATOM $PKG_PRE_ARGS $PKG_CMD $POST_ARGS
}

# parse the command line arguments
scan_args() {
    # for arg in "$@"; do
    while [ "$1" != "" ]; do
        arg=$1
        value=$2
        shift

        # after a command is found, just push everything on to the post args list
        if [ "$PKG_CMD" != "" ] || [ "$ATOM_CMD" != "" ]; then
            POST_ARGS="$POST_ARGS $arg"
            continue
        fi

        # match arguments
        case $arg in
            # verbose
            -v|--version) print_version ;;
            # debug, set flag
            -d|--debug) pkg_push_arg $arg; DEBUG=1 ;;
            # list arguments
            -l) list_commands ;;
            # simple args
            -N|-4|-6) pkg_push_arg $arg ;;
            # options
            -o) pkg_push_arg $arg
                pkg_push_arg $value
                shift ;;
            # don't allow these args, they'll mess up atom
            -j|-c|-r|-C|-R) disallowed_arg $arg ;;
            # install cmd
            install)
                PKG_CMD=$arg
                debug "Installing files to $VENDOR_ROOT ..."
                pkg_push_arg "-r"
                pkg_push_arg "$VENDOR_ROOT"
                ;;
            # pkg commands
            add|alias|annotate|audit|autoremove|backup|check|clean|config|create|delete|fetch|help|info|lock|plugins|query|register|remove|repo|rquery|search|set|ssh|shell|shlib|stats|unlock|update|updating|upgrade|version|which)
                PKG_CMD=$arg ;;
            # atom commands
            init|push|create-template)
                ATOM_CMD=$arg ;;

            *)
                echo
                echo "atom: unknown argument: $arg"
                echo
                print_usage ;;
        esac
    done
}

# push a pre-command argument on to the list
pkg_push_arg() {
    PKG_PRE_ARGS="$PKG_PRE_ARGS $1"
}

# throw an error if an argument is allowed for pkg, but would screw up atom
disallowed_arg() {
    die "the pkg argument \"$1\" is not allowed for atom"
}

# print the version of this software and exit
print_version() {
    echo "atom version v$VERSION"
    echo "pkg version `$PKG -v`"
    exit 0
}

# list the available commands and exit
list_commands() {
    echo "pkg commands:"
    $PKG -l
    echo "atom commands:"
    echo "init"
    echo "push"
    echo "create-template"
    exit 0
}

# print the available flags and exit
print_usage() {
    echo "Usage: atom [-v] [-d] [-l] [-N] [-o var=value] [-4|-6] <command> [<args>]"
    echo""
    echo "For more information on available commands and options see 'atom help' or 'pkg help'"
    exit 0
}

# our generic "print help then quit" function
print_push_help() {
    echo
    echo "atom push [android_serial]"
    echo
    echo "environment variables:"
    echo "$ANDROID_SERIAL   if set, the second argument 'android_serial' may be omitted"
    echo
    echo "Pushes all the installed files to the device specified by <android_serial>."
    echo "    <android_serial> must be the valid serial of a device for 'adb push'."
    echo "        If you don't know your device serial, type 'adb devices' and its the thing"
    echo "        at the beginning of the line. For example:"
    echo "            List of devices attached"
    echo "            10.100.100.150:5555     device"
    echo "            04157df435240637        device"
    echo
    echo "            ^^^^^^^^^^^^^^^^^^^^--- this is your device serial"
    echo
}

print_template_help() {
    echo
    echo "atom template <directory>"
    echo
    echo "creates the template for creating a new atom package in <directory>"
    echo
}

# if debugging is turned on (-d flag), print configuration information
print_configuration() {
    debug "pkg: $PKG"
    debug "pre command args: $PKG_PRE_ARGS"
    debug "pkg command: $PKG_CMD"
    debug "atom command: $ATOM_CMD"
    debug "post command args: $POST_ARGS"
}

# parse pkg commands to be smart about which to ignore
run_atom_cmd() {
    case $ATOM_CMD in
        init) atom_cmd_init $POST_ARGS;;
        push) atom_cmd_push $POST_ARGS;;
        create-template) atom_cmd_template $POST_ARGS;;
    esac
    exit 0
}

atom_cmd_init() {
    if [ -d $ATOM_HOME ]; then
        debug "atom home directory exists at: $ATOM_HOME"
        return 0
    fi

    echo "atom init running ..."
    mkdir -p $ATOM_HOME
    cp -a $CONFIG_DIR/ $ATOM_HOME

    SED_HOME=`echo $HOME | sed 's/\\//\\\\\\//g'`
    sed "s/\$HOME/$SED_HOME/g" $CONFIG_DIR/pkg.conf > $ATOM_HOME/pkg.conf
    echo "Created atom home directory: $ATOM_HOME"
}

atom_cmd_push() {
    #################################
    # Push Configuration
    #################################

    # make sure we have adb installed
    check_adb

    # if the user requested help, do it
    if [ x$1 == "x--help" ] || [ x$1 == "x-h" ]; then
        print_push_help
        exit 0
    fi

    if [ ! -d $STAGING_DIR ]; then
        echo
        echo "ERROR: the staging directory '$STAGING_DIR' is missing or not a valid directory."
        print_push_help
        exit 1
    fi

    # if the second argument is set, use that for ANDROID_SERIAL
    if [ "$1" != "" ]; then
        ANDROID_SERIAL=$1
    fi

    # if ANDROID_SERIAL isn't set (either by the environment variable or the command line) then quit
    if [ "$ANDROID_SERIAL" == "" ]; then
        echo
        echo "ERROR: <android_serial> not specified."
        print_push_help
        exit 1
    fi

    ADB=`which adb`
    ADB_CMD="$ADB -s $ANDROID_SERIAL"
    # show configuration
    debug " "
    debug "Push Configuration:"
    debug "ADB:              $ADB"
    debug "STAGING_DIR:      $STAGING_DIR"
    debug "ANDROID_SERIAL:   $ANDROID_SERIAL"
    debug "ADB COMMAND:      $ADB_CMD"
    debug " "

    #################################
    # Push Connect to device
    #################################
    adb_connect

    # make sure device is ready
    STATE=`$ADB_CMD get-state`
    if [ x$STATE != xdevice ]; then
        echo
        echo "ERROR: device $ANDROID_SERIAL is not ready"
        echo
        exit 1
    fi

    echo "device '$ANDROID_SERIAL' is ready ..."

    # prepare filesystem for writing
    # XXX: adb always returns 0 from these commands, so it's impossible to tell if they worked or not
    $ADB_CMD root
    adb_connect
    $ADB_CMD remount

    #################################
    # Push Files
    #################################

    # log files that were written
    # find inst-test -type f > $ATOM_LOG

    $ADB_CMD push $STAGING_DIR/* $DEVICE_DESTINATION
    if [ $? -ne 0 ]; then
        echo
        echo "ERROR: could not push files to device."
        echo "ERROR: installation failed."
        echo
    else
        echo
        echo "Install succeded! Done."
        echo
    fi
}

adb_connect() {
    # check to see if the serial matches an IP / port like: x.x.x.x:yyyy
    if [[ $ANDROID_SERIAL =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}(:[0-9]{1,5})?$ ]]; then
        $ADB connect $ANDROID_SERIAL
    fi
}

atom_cmd_template() {

    TEMPLATE_DIR=$1
    if [ "$TEMPLATE_DIR" == "" ]; then
        echo
        echo "ERROR: atom template expected a 'directory' argument"
        echo
        print_template_help
        exit 1
    fi

    create_toolchain
    debug "Toolchain located at: $TOOLCHAIN_HOME"

    mkdir -p "$TEMPLATE_DIR"
    create_manifest "$TEMPLATE_DIR/$MANIFEST_YAML"
    create_makefile "$TEMPLATE_DIR/Makefile"
    create_desc "$TEMPLATE_DIR/$DESC_FILE"
}

find_android_ndk() {
    # TODO check ANDROID_NDK_PATH variable
    # TODO check known locations (~/Library/... on Darwin)
    return 1
}

install_android_ndk() {
    echo "Android Native Development Kit (NDK) not found. Installing ... "
    TMP_DIR=`mktemp -d`
    CWD=`pwd`

    check_prog_dependency wget
    check_prog_dependency unzip
    WGET=`which wget`
    UNZIP=`which unzip`

    debug "wget installed: $WGET"
    debug "unzip installed: $UNZIP"

    cd $TMP_DIR
    $WGET $NDK_URL
    $UNZIP $NDK_ZIP
    ANDROID_NDK_PATH=$TMP_DIR/$NDK_DIR
    cd $CWD
}

create_toolchain() {
    if [ -d "$TOOLCHAIN_HOME" ]; then
        return 0;
    fi

    echo "Toolchain for 'android-$ANDROID_API' on '$ARCH' not found at '$TOOLCHAIN_HOME'. Attempting to create ..."

    find_android_ndk
    if [ $? -eq 1 ]; then
        install_android_ndk
    fi

    debug "Android NDK: $ANDROID_NDK_PATH"
    MKTOOLCHAIN="$ANDROID_NDK_PATH/build/tools/make-standalone-toolchain.sh"
    if [ ! -x $MKTOOLCHAIN ]; then
        die "Internal error: Android NDK installed but 'make-standalone-toolchain.sh' not found."
    fi

    $MKTOOLCHAIN --arch=$ARCH --platform=android-$ANDROID_API --install-dir=$TOOLCHAIN_HOME --stl=libc++
}

check_prog_dependency() {
    PROG=$1
    PROG_PATH=`which $PROG`
    if [ $? -eq 1 ]; then
        echo
        echo "Could not find the required program '$PROG' on your system."
        echo "Please install it and try again."
        echo
        exit 1
    fi
}

check_adb() {
    ADB=`which adb`
    if [ $? -eq 1 ]; then
        echo
        echo "ERROR: 'which adb' could not find adb."
        echo
        echo "Please install ADB and / or make sure it is on your path."
        echo "You can download Android Platform Tools (which contains ADB) here:"
        echo "    https://developer.android.com/studio/releases/platform-tools.html#download"
        echo
        echo "Your path is currently:"
        echo "    $PATH"
        echo
        exit 1
    fi
}


die() {
    ERRMSG=$1
    echo "ERROR: $ERRMSG"
    exit 1
}

debug() {
    if [ $DEBUG -eq 1 ]; then
        echo $*
    fi
}

create_manifest() {

echo "Creating manifest file: '$1' ..."

cat << EOF > "$1"
# name of the package
name: package-name

# package version number
version: 0.0.1

# the directory of this package in the atom-packages repo
origin: none

# comment is a one line description of the package
comment: This is a description of your package that will show up in search

# the main website for the program
www: http://package.com

# the package creator's email address
maintainer: your@email.address.com

# how the license array should be interpreted
licenselogic: single

# what type of license(s) are applicable to the software
licenses: [MIT]

# categories of the package
categories: []

####################################################################
#                 DO NOT EDIT BELOW THIS LINE
####################################################################
arch: android:$ANDROID_API:$ARCH:32
abi: Android:$ANDROID_API:$ARCH
prefix: /
options: {
  MACHINE: $MACHINE,
  ARCH: $ARCH,
  SYSTEM: android,
  ANDROID-API: "$ANDROID_API",
  CROSS_COMPILE: arm-linux-androideabi
}
EOF

}

create_makefile() {

echo "Creating makefile: '$1' ..."

TAB=`echo -e "\t"`
cat << EOF | sed "s/    /$TAB/g" > $1
# type the URL for downloading your tarball below
SOURCE_URL==
# type the name of the tarball after it's downloaded below
SOURCE_TARBALL=
# type the name of the directory that is created after the tarball is extracted below
SOURCE_DIR=

####################################################################
#                 CROSS-COMPILE VARIABLES
####################################################################

# these variables are exported to tell other makefiles how to compile for android
#
# don't edit these unless you know what you are doing

export ANDROID_TOOLCHAIN=$TOOLCHAIN_HOME
export ANDROID_API=21
export MACHINE=$MACHINE
export SYSTEM=android
export ARCH=$ARCH
export CROSS_COMPILE=$CROSS_COMPILE

export ANDROID_TOOLCHAIN_BIN=\$(ANDROID_TOOLCHAIN)/bin
export ANDROID_SYSROOT=\$(ANDROID_TOOLCHAIN)/sysroot
export SYSROOT=\$(ANDROID_SYSROOT)
export PATH:=\$(PATH):\$(ANDROID_TOOLCHAIN_BIN)

export CFLAGS=-fPIE -D__ANDROID_API__=$ANDROID_API
export CXXFLAGS=-fPIE -D__ANDROID_API__=$ANDROID_API -std=c++11 -I\$(ANDROID_TOOLCHAIN)/include/c++/4.9.x
export LDFLAGS=-fPIE -pie -L\$(SYSROOT)/usr/lib

####################################################################
#                 BUILD STUFF
####################################################################

INSTALL_DIR=\$(shell pwd)/instdir
all: configure build install package
.PHONY: all

configure: \$(SOURCE_DIR)
    cd \$(SOURCE_DIR) && \\
        ./configure \\
            --host=arm-linux-androideabi \\
            --prefix=\$(INSTALL_DIR) \\
            --with-sysroot=\$(SYSROOT)

build: \$(SOURCE_DIR)
    cd \$(SOURCE_DIR) && \\
        make
.PHONY: build

install: \$(SOURCE_DIR)
    cd \$(SOURCE_DIR) && \\
        make install
.PHONY: install

package:
    find \$(INSTALL_DIR) -type f | sed 's:^\$(INSTALL_DIR)::g' > files.plist
    atom -d create -r \$(INSTALL_DIR) -p ./files.plist -m .
.PHONY: package

\$(SOURCE_TARBALL):
    wget \$(SOURCE_URL)

\$(SOURCE_DIR): \$(SOURCE_TARBALL)
    tar xzvf \$(SOURCE_TARBALL)

clean:
    rm -rf \$(SOURCE_TARBALL) \$(SOURCE_DIR)
.PHONY: clean
EOF

}

create_desc() {

echo "Creating description file: '$1' ..."

cat << EOF > $1
Replace this with the description of your package. If you are reading this in your package, you need to edit your +DESC file.
EOF

}

# only run main after everything else has been defined
# easier to read this way at the expense of this one line being a bit confusing :)
main "$@"